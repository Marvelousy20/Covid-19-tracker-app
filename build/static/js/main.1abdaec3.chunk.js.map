{"version":3,"sources":["Components/Cards/Cards.js","Components/api/api.js","Components/Charts/Charts.js","Components/CountryPicker/countryPicker.js","App.js","serviceWorker.js","index.js","img/image.png"],"names":["cards","data","console","log","confirmed","Grid","container","spacing","className","item","xs","sm","Card","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","Axios","require","default","url","fetchData","country","a","changeableURL","get","fetchCountryData","countries","map","name","dailyData","modifiedData","total","date","reportDate","Charts","React","useState","mydailyData","setmyDailyData","useEffect","response","lineChart","length","labels","datasets","label","fill","borderColor","backgroundColor","barChart","options","legend","display","title","text","countryPicker","handleSelect","FormControl","NativeSelect","defaultValue","onChange","e","target","index","key","App","setData","setCountries","setCountry","responseData","handleCountry","fetchedData","src","coronaImg","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.1abdaec3.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\r\nimport Cards from './Cards.css'\r\nimport CountUp from 'react-countup'\r\n\r\nconst cards = ({data}) => {\r\n    console.log(data)\r\n    return (\r\n        <div>\r\n        {data.confirmed ? \r\n        <Grid container spacing={2} className = 'grid'>\r\n            <Grid item xs={12} sm={3}>\r\n                <Card className = \"card1 card\">\r\n                    <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant = \"h5\">\r\n                        <CountUp \r\n                                start = {0}\r\n                                end = {data.confirmed.value}    \r\n                                duration = {2}\r\n                                separator = \",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography variant = \"h6\">{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant = \"body2\">\r\n                            Number of confirmed COVID-19 cases\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs = {12} sm={3}>\r\n            <Card className = \"card2 card\">\r\n                    <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant = \"h5\">\r\n                            <CountUp \r\n                                start = {0}\r\n                                end = {data.recovered.value}    \r\n                                duration = {2}\r\n                                separator = \",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography variant = \"h6\">{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant = \"body2\">\r\n                            Number of recoveries from COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs = {12} sm={3}>\r\n            <Card className = \"card3 card\">\r\n                    <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant = \"h5\">  \r\n                        <CountUp \r\n                                start = {0}\r\n                                end = {data.deaths.value}    \r\n                                duration = {2}\r\n                                separator = \",\"\r\n                            /></Typography>\r\n                        <Typography variant = \"h6\" >{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant = \"body2\">\r\n                            Number of deaths caused by COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid> : <h3>loading...</h3> }\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default cards","const { default: Axios } = require(\"axios\")\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async (country) => {\r\n\r\n    let changeableURL =  url ;\r\n\r\n    if(country){\r\n        changeableURL = (`${url}/countries/${country}`)\r\n    }\r\n\r\n    try {\r\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await Axios.get(changeableURL) ;\r\n\r\n        return {confirmed, recovered, deaths, lastUpdate} \r\n    } \r\n    \r\n    catch (error) {\r\n        console.log(error) ;\r\n    }\r\n}\r\n\r\nexport const fetchCountryData = async () => {\r\n    const {data: {countries}}= await Axios(`${url}/countries`)\r\n    return countries.map(country => country.name) \r\n}\r\n\r\n\r\nexport const dailyData = async () => {\r\n    const {data} = await Axios.get(`${url}/daily`) ;\r\n\r\n    const modifiedData = data.map(dailyData => ({\r\n        confirmed: dailyData.confirmed.total,\r\n        deaths: dailyData.deaths.total,\r\n        date: dailyData.reportDate\r\n    }))\r\n    \r\n    return modifiedData\r\n}\r\n","import React from 'react' ;\r\nimport styles from './Charts.css' ;\r\nimport {Line, Bar} from 'react-chartjs-2' ;\r\nimport { dailyData } from '../api/api';\r\n\r\n\r\nconst Charts = ({country, data}) => {\r\n\r\n    const [mydailyData, setmyDailyData] = React.useState([]) ;\r\n\r\n    React.useEffect(() => {\r\n        const response = async () => {\r\n            setmyDailyData(await dailyData()) ;\r\n\r\n            console.log(mydailyData)\r\n        }\r\n\r\n        response()\r\n    }, [])\r\n\r\n\r\n\r\n    const lineChart = (\r\n        mydailyData.length\r\n        ? \r\n        <Line\r\n            data = {{\r\n                labels: mydailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    label: 'Infected',\r\n                    data: mydailyData.map(({ confirmed }) => confirmed),\r\n                    fill: true,\r\n                    borderColor: '#3333ff',\r\n                }, \r\n                {\r\n                    label: 'Deaths',\r\n                    data: mydailyData.map(({ deaths }) => deaths),\r\n                    fill: true,\r\n                    borderColor: '#3333ff',\r\n                    backgroundColor: 'rgba(255, 0, 0,.5)'\r\n                }]\r\n            }}\r\n        />\r\n        : null \r\n    )\r\n\r\n    const barChart = (\r\n        data.confirmed ?\r\n        <Bar \r\n            data = {{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{\r\n                    label: 'People',\r\n                    backgroundColor: [\r\n                        'rgba(0, 0, 255, .5)',\r\n                        'rgba(0, 255, 0, .5)',\r\n                        'rgba(255, 0, 0, .5)',\r\n                    ],\r\n                    data: [data.confirmed.value, data.recovered.value, data.deaths.value]\r\n                }]\r\n            }}\r\n            options = {{\r\n                legend: {display: false},\r\n                title: {display: true, text: `Current state in ${country}`}\r\n            }}\r\n        /> : null\r\n    )\r\n\r\n    return (\r\n        <div className = \"charts\">\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charts","import React from 'react'\r\nimport { FormControl, NativeSelect } from '@material-ui/core'\r\nimport styles from './countryPicker.css'\r\n\r\nconst countryPicker = ({countries, handleSelect, country}) => {\r\n\r\n    const handleChange = (e) => {\r\n        handleSelect(e.target.value)\r\n    } \r\n    \r\n    console.log(countries)\r\n    return (\r\n        countries.length > 1 ?\r\n        <div className= 'cp'>\r\n            <FormControl className = \"form\">\r\n                <NativeSelect defaultValue = \"\" onChange = {handleChange}>\r\n                    <option value= \"\">Global</option>\r\n                    {countries.map((country, index) => <option key={index} value={country}>\r\n                    {country}\r\n                    </option> )}\r\n                </NativeSelect>\r\n            </FormControl> \r\n        </div> : null\r\n    )\r\n}\r\n\r\nexport default countryPicker","import React from 'react';\nimport './App.css';\nimport { Cards, Charts, CountryPicker } from './Components'\nimport { fetchData, fetchCountryData } from './Components/api/api'\nimport coronaImg from './img/image.png'\nimport Axios from 'axios';\n\n// import Cards from './Components/Cards/Cards'\n// import Charts from './Components/Charts/Charts'\n\n\nfunction App() {\n\n  const [data, setData] = React.useState({}) ;\n\n  const [countries, setCountries] = React.useState([])\n\n  const [country, setCountry] = React.useState('') ;\n\n  React.useEffect(() => {\n    const responseData = async () => {\n      setData(await fetchData()) ;\n    }\n    responseData() ;\n  }, [])\n\n  React.useEffect(() => {\n    const responseData = async () => {\n      setCountries(await fetchCountryData())\n    }\n    responseData()\n  }, []) \n\n  const handleCountry = async (country) => {\n    const fetchedData = await fetchData(country)\n\n    setCountry(country) ;\n    setData(fetchedData) ;\n  }\n\n  return (\n    <div className=\"app\">\n      <img src = {coronaImg} alt = \"corona\" className = 'img' />\n      <Cards data = {data} className = \"cards\" />\n      <CountryPicker countries = {countries} handleSelect = {handleCountry} />\n      <Charts data = {data} country = {country} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/image.b9bc190b.png\";"],"sourceRoot":""}